% Parameters
M = 250;  % (kg)
m1 = 20;  % (kg)
m2 = 20;  % (kg)
k1 = 20000;  % (N/m)
k2 = 20000;  % (N/m)
c1 = 1400;  % (Ns/m)
c2 = 1500;  % (Ns/m)
g = 9.81;  % (m/s^2)
a = 0.8;  % (m)
b = 0.8;  % (m)
L = a + b;  % (m)

% Road profile
road_length = 100; % m
sampling_rate = 3; % samples per meter
road_profile = create_road_profile(road_length, sampling_rate);

% Time and position vectors
time_step = 0.01; % s
time = 0:time_step:road_length/sampling_rate;
position = 0:1/sampling_rate:road_length;

% Initial conditions
y0 = [0; 0; 0; 0];  % [front suspension displacement; rear suspension displacement; front suspension velocity; rear suspension velocity]

% Time settings
t0 = 0;  % initial time (s)
tf = road_length/sampling_rate;  % final time (s)
dt = 0.01;  % time step (s)
t = t0:dt:tf;

% Compute wheel positions
front_wheel_pos = min(floor(a * t * sampling_rate) + 1, length(road_profile));
rear_wheel_pos = min(floor(b * t * sampling_rate) + 1, length(road_profile));

% Adjust wheel positions exceeding road_profile length
front_wheel_pos(front_wheel_pos > length(road_profile)) = length(road_profile);
rear_wheel_pos(rear_wheel_pos > length(road_profile)) = length(road_profile);

% Precompute constant values
F1_input = k1 * (road_profile(front_wheel_pos) - y0(1)) + c1 * (-y0(3));
F2_input = k2 * (road_profile(rear_wheel_pos) - y0(2)) + c2 * (-y0(4));

% Preallocate result array
y = zeros(4, length(t));
y(:, 1) = y0;

for i = 2:length(t)-1
    RK1 = dt * suspension_dynamics(t(i), y(:, i), M, m1, m2, k1, k2, c1, c2, a, b, g, F1_input(i), F2_input(i));
    RK2 = dt * suspension_dynamics(t(i) + dt/2, y(:, i) + RK1/2, M, m1, m2, k1, k2, c1, c2, a, b, g, F1_input(i+1), F2_input(i+1));
    RK3 = dt * suspension_dynamics(t(i) + dt/2, y(:, i) + RK2/2, M, m1, m2, k1, k2, c1, c2, a, b, g, F1_input(i+1), F2_input(i+1));
    RK4 = dt * suspension_dynamics(t(i) + dt, y(:, i) + RK3, M, m1, m2, k1, k2, c1, c2, a, b, g, F1_input(i+1), F2_input(i+1));

    y(:, i+1) = y(:, i) + (RK1 + 2*RK2 + 2*RK3 + RK4) / 6;
end

% Plot results
figure;
subplot(4, 1, 1);
plot(t, y(1, :), 'r', 'LineWidth', 0.5);
hold on;
plot(t, y(2, :), 'b', 'LineWidth', 0.5);
hold off;
xlabel('Time (s)');
ylabel('Displacement (m)');
legend('Front Suspension', 'Rear Suspension');
title('Suspension Displacement');

subplot(4, 1, 2);
plot(t, y(3, :), 'r', 'LineWidth', 0.5);
hold on;
plot(t, y(4, :), 'b', 'LineWidth', 0.5);
hold off;
xlabel('Time (s)');
ylabel('Velocity (m/s)');
legend('Front Suspension', 'Rear Suspension');
title('Suspension Velocity');

% Center of Gravity Vertical Position
CoG_position = (a * y(1, :) + b * y(2, :)) / L;
subplot(4, 1, 3);
plot(t, CoG_position, 'g', 'LineWidth', 0.5);
xlabel('Time (s)');
ylabel('Vertical Position (m)');
legend('Center of Gravity');
title('Center of Gravity Vertical Position');

function road_profile = create_road_profile(road_length, sampling_rate)
    road_profile = rand(1, road_length * sampling_rate) * 0.1; % random road profile with max height of 0.1 m
end

function dydt = suspension_dynamics(~, y, M, m1, m2, k1, k2, c1, c2, a, b, g, F1_input, F2_input)
    x1 = y(1);
    x2 = y(2);
    v1 = y(3);
    v2 = y(4);

    % Spring forces
    F1_Spring = -k1 * x1;
    F2_Spring = -k2 * x2;

    % Damper forces
    F1_Damper = -c1 * v1;
    F2_Damper = -c2 * v2;

    % Gravitational forces
    F1_Grav = (M * g * b) / (a + b);
    F2_Grav = (M * g * a) / (a + b);

    % Total forces
    F1_Total = F1_Spring + F1_Damper + F1_Grav + F1_input;
    F2_Total = F2_Spring + F2_Damper + F2_Grav + F2_input;

    % Accelerations
    a1 = F1_Total / (M + m1);
    a2 = F2_Total / (M + m2);

    dydt = [v1; v2; a1; a2];
end
