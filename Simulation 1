% Parameters
mr = 75; % kg
mb = 200; % kg
m = mr + mb;
k1 = 5000; % N/m
k2 = 4000; % N/m
c1 = 3000; % Ns/m
c2 = 2500; % Ns/m
L = 3; % m
cg = 0.6; % m from the front axle

% Road profile
road_length = 100; % m
sampling_rate = 3; % samples per meter
road_profile = create_road_profile(road_length, sampling_rate);

% Time and position vectors
time_step = 0.01; % s
time = 0:time_step:road_length/sampling_rate;
position = 0:1/sampling_rate:road_length;

% Initialize states
initial_states = [0; 0; 0; 0];

% Solve ODE
[time, states] = ode45(@(t, x) suspension_model(t, x, position, road_profile, sampling_rate, m, k1, k2, c1, c2), time, initial_states);

% Calculate positions
front_suspension_position = states(:, 1);
rear_suspension_position = states(:, 3);

% Calculate centre of gravity position
cg_position = cg * L;
cg = states(:, 1) * (1 - cg_position / L) + states(:, 3) * (cg_position / L);

% Plot results
figure;

subplot(3,1,1);
plot(position, road_profile);
title('Randomised Road Profile');
xlabel('Position (m)');
ylabel('Height (m)');
grid on;

subplot(3,1,2);
plot(position, interp1(time, front_suspension_position, position / sampling_rate), 'r', position, interp1(time, rear_suspension_position, position / sampling_rate), 'b');
title('Front and Rear Vertical Displacement');
xlabel('Position (m)');
ylabel('Displacement (m)');
legend('Front Suspension', 'Rear Suspension');
grid on;

subplot(3,1,3);
plot(position, interp1(time, cg, position / sampling_rate), 'k');
title('Centre of Gravity Vertical Displacement');
xlabel('Position (m)');
ylabel('Displacement (m)');
grid on;

% Functions
function road_profile = create_road_profile(road_length, sampling_rate)
    x = 0:1/sampling_rate:road_length;
    road_profile = 0.1 * sin(0.05 * x) + 0.05 * randn(1, length(x));
end

function dxdt = suspension_model(t, x, position, road_profile, sampling_rate, total_mass, front_stiffness, rear_stiffness, front_damping, rear_damping)
    % States: x = [front_disp; front_vel; rear_disp; rear_vel]
    % Parameters: total_mass, front_stiffness, rear_stiffness, front_damping, rear_damping

    % Interpolate road profile at current position
    road_height = interp1(position, road_profile, t * sampling_rate);

    % Forces
    front_force = front_stiffness * (road_height - x(1)) + front_damping * (-x(2));
    rear_force = rear_stiffness * (road_height - x(3)) + rear_damping * (-x(4));

    % Equations of motion
    front_acc = front_force / total_mass;
    rear_acc = rear_force / total_mass;

    % State derivatives
    dxdt = [x(2); front_acc; x(4); rear_acc];
end
